version: 2.1

executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

parameters:
  workflow-id:
    type: string
    default: "7861"
  # memstash-token:
  #   type: string
  #   default: "b9461c43-6888-4d04-8e76-7beeddbb863c"
commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy project backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>
      - run:
          name: Destroy project frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
            TERM: xterm-256color
          when: << parameters.when >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: cacfed63-3a98-4951-958f-af5e5aa339b3" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            sudo npm i
            sudo npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - save_cache:
          paths: [frontend/dist]
          key: frontend-dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            sudo npm install
            sudo npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - save_cache:
          paths: [backend/dist]
          key: backend-dist

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test Frontend
          command: |
            cd frontend
            exit 0

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test Back-end
          command: |
            # npm run test
            # cd backend
            # npm run test
            exit 0
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Scan Frontend-end
          command: |
            exit 0
            # # npm run test
            # cd frontend
            # npm update
            # npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: ["backend-build"]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm update
            npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople-backend-<< pipeline.parameters.workflow-id >> \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"
      - run:
          name: Save backend URL in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-<<pipeline.parameters.workflow-id>>" \
              --output text)
            curl -H "Content-Type: text/plain" -H "token: 3b9cb796-d840-441f-aa56-ee81244df30c" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL  
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=udapeople-frontend-<< pipeline.parameters.workflow-id >> \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>"
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --output text >> inventory.txt
            cat inventory.txt
            ls -la
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail

  configure-infrastructure:
    executor: python
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["43:f5:17:fc:61:69:1e:19:96:41:47:37:d0:f7:a3:45"]
      - attach_workspace:
          at: .
      - run:
          name: Install Ansible dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail


      # Here's where you will add some code to rollback on failure

  run-migrations:
    executor: node
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            ls -la
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migration_status
      # - run:
      #     name: Send migration results to memstash
      #     command: |
      #       # Your code here
      #       exit 1
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: cacfed63-3a98-4951-958f-af5e5aa339b3" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_<<pipeline.parameters.workflow-id>>
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: cacfed63-3a98-4951-958f-af5e5aa339b3" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_<<pipeline.parameters.workflow-id>>
            fi
            echo "WorkflowID=<<pipeline.parameters.workflow-id>>"
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      # Here's where you will add some code to rollback on failure

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: |
            export API_URL=$(curl -H "token: 3b9cb796-d840-441f-aa56-ee81244df30c" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-<<pipeline.parameters.workflow-id>>" --recursive
      - save_cache:
          paths: [frontend/dist]
          key: frontend-dist
      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      - revert_migrations:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail

  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["43:f5:17:fc:61:69:1e:19:96:41:47:37:d0:f7:a3:45"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
            ls -la
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_URL=$(curl -H "token: 3b9cb796-d840-441f-aa56-ee81244df30c" --request GET https://api.memstash.io/values/BACKEND_URL)
            # curl "${BACKEND_URL}/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-<<pipeline.parameters.workflow-id>>.s3-website.us-west-2.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"

      # Here's where you will add some code to rollback on failure
      - destroy_environment:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail
      - revert_migrations:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: 55a8d1b0-b3a5-4c20-8c19-0714e09338c9" --request PUT --data "$WorkflowID" https://api.memstash.io/values/WorkflowID
      - run:
          name: Update cloudfront distribution
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="<<pipeline.parameters.workflow-id>>" \
              --tags project=udapeople
      - revert_migrations:
          id: <<pipeline.parameters.workflow-id>>
          when: on_fail


  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            OldWorkflowID=$(curl -H "token: 55a8d1b0-b3a5-4c20-8c19-0714e09338c9" --request GET https://api.memstash.io/values/WorkflowID)
            CurrentWorkflowID=<<pipeline.parameters.workflow-id>>
            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi
          environment:
            TERM: xterm-256color

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
